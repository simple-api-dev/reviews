##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	# root /var/www/review-api/api/public;
	root /var/www/review-api/website/public;

	# Add index.php to the list if you are using PHP
	index index.html index.php;

	server_name reviews.simpleapi.dev;

	charset utf-8;

	location = /favicon.ico { access_log off; log_not_found off;}
	location = /robots.txt {access_log off; log_not_found off;}

	error_page 404 /index.php;

	location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
		if (!-e $request_filename){
			rewrite ^(.*)$ /$1.php;
		}
		try_files $uri $uri/ /uri.php?$query_string;
       

		location ~ \.php$ {
		#	include snippets/fastcgi-php.conf;
		#	fastcgi_index index.php;
		#	fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
			fastcgi_param SCRIPT_FILENAME $request_filename;
			fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
			include fastcgi_params;
		}
	}

	location /api {

		alias /var/www/review-api/api/public;
		index index.html index.php;
		try_files $uri $uri/ @api;

		location ~ \.php$ {
                #       include snippets/fastcgi-php.conf;
                        fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
                #       fastcgi_index index.php;
		#	fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
                        fastcgi_param SCRIPT_FILENAME $request_filename;
                        include fastcgi_params;
                }

	}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one

	location ~ /\.(?!well-known).* {
		deny all;
	}

	location @api {
		rewrite /api/(.*)$ /api/index.php?/$1 last;
	}

    listen [::]:443 ssl ipv6only=on; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/reviews.simpleapi.dev/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/reviews.simpleapi.dev/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}

server {
    if ($host = reviews.simpleapi.dev) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


	listen 80 default_server;
	listen [::]:80 default_server;

	server_name reviews.simpleapi.dev;
    return 404; # managed by Certbot

}
